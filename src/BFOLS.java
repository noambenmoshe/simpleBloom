import java.util.*;

public class BFOLS implements BloomFilter {
    private int m; //filter length
    private int k; //number of hash functions
    private Vector<Integer> bloomFilter;
    private HashFunction hashFunction;

    public int getM() {
        return m;
    }
    public int getSize(){
        return bloomFilter.size();
    }
    // regular constructor
    public BFOLS(int m, int k, Map<Integer, Boolean> bloom_Filter, HashFunction hash_Function ) {
        this.m = m;
        this.k = k;
        this.bloomFilter = new Vector<>();
        this.hashFunction = hash_Function;
    }

    //inputs: s - represents the square root of the universe size
    //        d - represents the free zone size  / size of set you can insert with out false positives
    //        hashFunction - represents each number and it's mask bits
    public BFOLS(int s, int d, HashFunction hashFunction){
        this.m = s * (d + 1);
        this.k = d + 1;
        this.bloomFilter = new Vector<>();
        this.hashFunction = hashFunction;
    }

    //inputs: s - represents the square root of the universe size
    //        d - represents the free zone size  / size of set you can insert with out false positives
    public BFOLS(int unisize, int d){
        MOLS mols_data = new MOLS();
        int s = (int) Math.ceil(Math.pow(unisize, 1.0/(double)2));
        s =  initializeMOLSData(s, mols_data);
        if(s != -1){
            this.m = s * (d + 1);
            this.k = d + 1;
            this.bloomFilter = new Vector<>();
            OLS_HF ols_hf = new OLS_HF(s,d);

            ols_hf.set(mols_data);
            this.hashFunction = ols_hf;

            System.out.println("BFOLS values s = " + s);
            if (d > mols_data.choose_OLS_vec(s).size() + 1){
                this.m = -1;
                System.out.println("set is bigger than BF can represent without false positives");
            }
        }else this.m = -1;
    }

    int initializeMOLSData(int s, MOLS mols_data) {
        // 3 mols of s=5 from Ori's paper
        List<Integer> numList5_0_paper = Arrays.asList(0,1,2,3,4,1,2,3,4,0,2,3,4,0,1,3,4,0,1,2,4,0,1,2,3);
        List<Integer> numList5_1_paper = Arrays.asList(0,1,2,3,4,4,0,1,2,3,3,4,0,1,2,2,3,4,0,1,1,2,3,4,0);
        List<Integer> numList5_2_paper = Arrays.asList(0,1,2,3,4,3,4,0,1,2,1,2,3,4,0,4,0,1,2,3,2,3,4,0,1);
        // MOLS from https://users.monash.edu.au/~iwanless/data/MOLS/
        // 2 of s=3
        List<Integer> numList3_0 = Arrays.asList(0,1,2,1,2,0,2,0,1);
        List<Integer> numList3_1 = Arrays.asList(0,1,2,2,0,1,1,2,0);
        // 3 of s=4
        List<Integer> numList4_0 = Arrays.asList(0,1,2,3,1,0,3,2,2,3,0,1,3,2,1,0);
        List<Integer> numList4_1 = Arrays.asList(0,1,2,3,2,3,0,1,3,2,1,0,1,0,3,2);
        List<Integer> numList4_2 = Arrays.asList(0,1,2,3,3,2,1,0,1,0,3,2,2,3,0,1);
        // 4 of s=5
        List<Integer> numList5_0 = Arrays.asList(0,1,2,3,4,1,2,3,4,0,2,3,4,0,1,3,4,0,1,2,4,0,1,2,3);
        List<Integer> numList5_1 = Arrays.asList(0,1,2,3,4,4,0,1,2,3,3,4,0,1,2,2,3,4,0,1,1,2,3,4,0);
        List<Integer> numList5_2 = Arrays.asList(0,1,2,3,4,3,4,0,1,2,1,2,3,4,0,4,0,1,2,3,2,3,4,0,1);
        List<Integer> numList5_3 = Arrays.asList(0,1,2,3,4,2,3,4,0,1,4,0,1,2,3,1,2,3,4,0,3,4,0,1,2);
        // 6 of s=7
        List<Integer> numList7_0 = Arrays.asList(0,1,2,3,4,5,6,1,2,3,4,5,6,0,2,3,4,5,6,0,1,3,4,5,6,0,1,2,4,5,6,0,1,2,3,5,6,0,1,2,3,4,6,0,1,2,3,4,5);
        List<Integer> numList7_1 = Arrays.asList(0,1,2,3,4,5,6,6,0,1,2,3,4,5,5,6,0,1,2,3,4,4,5,6,0,1,2,3,3,4,5,6,0,1,2,2,3,4,5,6,0,1,1,2,3,4,5,6,0);
        List<Integer> numList7_2 = Arrays.asList(0,1,2,3,4,5,6,5,6,0,1,2,3,4,3,4,5,6,0,1,2,1,2,3,4,5,6,0,6,0,1,2,3,4,5,4,5,6,0,1,2,3,2,3,4,5,6,0,1);
        List<Integer> numList7_3 = Arrays.asList(0,1,2,3,4,5,6,4,5,6,0,1,2,3,1,2,3,4,5,6,0,5,6,0,1,2,3,4,2,3,4,5,6,0,1,6,0,1,2,3,4,5,3,4,5,6,0,1,2);
        List<Integer> numList7_4 = Arrays.asList(0,1,2,3,4,5,6,3,4,5,6,0,1,2,6,0,1,2,3,4,5,2,3,4,5,6,0,1,5,6,0,1,2,3,4,1,2,3,4,5,6,0,4,5,6,0,1,2,3);
        List<Integer> numList7_5 = Arrays.asList(0,1,2,3,4,5,6,2,3,4,5,6,0,1,4,5,6,0,1,2,3,6,0,1,2,3,4,5,1,2,3,4,5,6,0,3,4,5,6,0,1,2,5,6,0,1,2,3,4);
        // 7 of s=8
        List<Integer> numList8_0 = Arrays.asList(0,1,2,3,4,7,5,6,1,0,3,2,7,4,6,5,2,3,0,1,6,5,7,4,3,2,1,0,5,6,4,7,4,7,6,5,0,1,3,2,7,4,5,6,1,0,2,3,5,6,7,4,3,2,0,1,6,5,4,7,2,3,1,0);
        List<Integer> numList8_1 = Arrays.asList(0,1,2,3,4,5,6,7,2,3,0,1,7,6,5,4,4,5,7,6,0,1,3,2,7,6,4,5,2,3,1,0,3,2,1,0,6,7,4,5,1,0,3,2,5,4,7,6,5,4,6,7,1,0,2,3,6,7,5,4,3,2,0,1);
        List<Integer> numList8_2 = Arrays.asList(0,1,2,3,4,5,6,7,3,2,1,0,6,7,4,5,7,6,4,5,2,3,1,0,5,4,6,7,1,0,2,3,6,7,5,4,3,2,0,1,4,5,7,6,0,1,3,2,2,3,0,1,7,6,5,4,1,0,3,2,5,4,7,6);
        List<Integer> numList8_3 = Arrays.asList(0,1,2,3,4,5,6,7,4,5,7,6,0,1,3,2,3,2,1,0,6,7,4,5,6,7,5,4,3,2,0,1,7,6,4,5,2,3,1,0,2,3,0,1,7,6,5,4,1,0,3,2,5,4,7,6,5,4,6,7,1,0,2,3);
        List<Integer> numList8_4 = Arrays.asList(0,1,2,3,4,5,6,7,5,4,6,7,1,0,2,3,1,0,3,2,5,4,7,6,4,5,7,6,0,1,3,2,2,3,0,1,7,6,5,4,6,7,5,4,3,2,0,1,7,6,4,5,2,3,1,0,3,2,1,0,6,7,4,5);
        List<Integer> numList8_5 = Arrays.asList(0,1,2,3,4,5,6,7,6,7,5,4,3,2,0,1,5,4,6,7,1,0,2,3,2,3,0,1,7,6,5,4,1,0,3,2,5,4,7,6,7,6,4,5,2,3,1,0,3,2,1,0,6,7,4,5,4,5,7,6,0,1,3,2);
        List<Integer> numList8_6 = Arrays.asList(0,1,2,3,4,5,6,7,7,6,4,5,2,3,1,0,6,7,5,4,3,2,0,1,1,0,3,2,5,4,7,6,5,4,6,7,1,0,2,3,3,2,1,0,6,7,4,5,4,5,7,6,0,1,3,2,2,3,0,1,7,6,5,4);
        // 8 of s=9
        List<Integer> numList9_0 = Arrays.asList(1,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,1,3,1,2,6,4,5,9,7,8,4,8,6,7,2,9,1,5,3,5,6,1,8,9,4,2,3,7,6,7,8,9,1,2,3,4,5,7,5,9,1,8,3,4,2,6,8,9,7,2,3,1,5,6,4,9,4,5,3,7,8,6,1,2);
        List<Integer> numList9_1 = Arrays.asList(1,2,3,4,5,6,7,8,9,8,6,1,2,9,4,5,3,7,7,8,9,1,2,3,4,5,6,5,3,7,8,6,1,2,9,4,6,4,5,9,7,8,3,1,2,3,1,2,6,4,5,9,7,8,9,7,8,3,1,2,6,4,5,4,5,6,7,8,9,1,2,3,2,9,4,5,3,7,8,6,1);
        List<Integer> numList9_2 = Arrays.asList(1,2,3,4,5,6,7,8,9,9,1,5,3,4,8,6,7,2,4,5,6,7,8,9,1,2,3,3,4,8,6,7,2,9,1,5,8,9,7,2,3,1,5,6,4,2,3,1,5,6,4,8,9,7,5,6,4,8,9,7,2,3,1,7,8,9,1,2,3,4,5,6,6,7,2,9,1,5,3,4,8);
        List<Integer> numList9_3 = Arrays.asList(1,2,3,4,5,6,7,8,9,7,5,6,1,8,9,4,2,3,6,4,5,9,7,8,3,1,2,9,7,2,3,1,5,6,4,8,3,1,8,6,4,2,9,7,5,4,8,9,7,2,3,1,5,6,2,9,1,5,3,4,8,6,7,5,6,4,8,9,7,2,3,1,8,3,7,2,6,1,5,9,4);
        List<Integer> numList9_4 = Arrays.asList(1,2,3,4,5,6,7,8,9,6,7,8,9,1,2,3,4,5,2,9,4,5,3,7,8,6,1,7,5,9,1,8,3,4,2,6,4,3,2,7,6,5,1,9,8,8,4,6,2,7,9,5,1,3,3,8,7,6,2,1,9,5,4,9,1,5,3,4,8,6,7,2,5,6,1,8,9,4,2,3,7);
        List<Integer> numList9_5 = Arrays.asList(1,2,3,4,5,6,7,8,9,5,9,7,8,3,1,2,6,4,8,6,1,2,9,4,5,3,7,6,1,5,9,4,8,3,7,2,2,7,9,5,1,3,8,4,6,9,5,4,3,8,7,6,2,1,4,3,2,7,6,5,1,9,8,3,4,8,6,7,2,9,1,5,7,8,6,1,2,9,4,5,3);
        List<Integer> numList9_6 = Arrays.asList(1,2,3,4,5,6,7,8,9,4,8,9,7,2,3,1,5,6,5,3,7,8,6,1,2,9,4,2,9,1,5,3,4,8,6,7,9,5,4,3,8,7,6,2,1,7,6,5,1,9,8,4,3,2,8,4,6,2,7,9,5,1,3,6,7,2,9,1,5,3,4,8,3,1,8,6,4,2,9,7,5);
        List<Integer> numList9_7 = Arrays.asList(1,2,3,4,5,6,7,8,9,3,4,2,6,7,5,9,1,8,9,7,8,3,1,2,6,4,5,8,6,4,2,9,7,5,3,1,7,8,6,1,2,9,4,5,3,5,9,7,8,3,1,2,6,4,6,1,5,9,4,8,3,7,2,2,3,1,5,6,4,8,9,7,4,5,9,7,8,3,1,2,6);
        // here and on from: Parity of MOLS
        // 3 of s=11
        List<Integer> numList11_0 = Arrays.asList(0,2,4,6,8,10,1,3,5,7,9,10,1,3,5,7,9,0,2,4,6,8,9,0,2,4,6,8,10,1,3,5,7,8,10,1,3,5,7,9,0,2,4,6,7,9,0,2,4,6,8,10,1,3,5,6,8,10,1,3,5,7,9,0,2,4,5,7,9,0,2,4,6,8,10,1,3,4,6,8,10,1,3,5,7,9,0,2,3,5,7,9,0,2,4,6,8,10,1,2,4,6,8,10,1,3,5,7,9,0,1,3,5,7,9,0,2,4,6,8,10);
        List<Integer> numList11_1 = Arrays.asList(0,3,6,9,1,4,7,10,2,5,8,9,1,4,7,10,2,5,8,0,3,6,7,10,2,5,8,0,3,6,9,1,4,5,8,0,3,6,9,1,4,7,10,2,3,6,9,1,4,7,10,2,5,8,0,1,4,7,10,2,5,8,0,3,6,9,10,2,5,8,0,3,6,9,1,4,7,8,0,3,6,9,1,4,7,10,2,5,6,9,1,4,7,10,2,5,8,0,3,4,7,10,2,5,8,0,3,6,9,1,2,5,8,0,3,6,9,1,4,7,10);
        List<Integer> numList11_2 = Arrays.asList(1,4,8,0,5,9,2,6,10,3,7,8,0,5,9,2,6,10,3,7,1,4,5,9,2,6,10,3,7,1,4,8,0,2,6,10,3,7,1,4,8,0,5,9,10,3,7,1,4,8,0,5,9,2,6,7,1,4,8,0,5,9,2,6,10,3,4,8,0,5,9,2,6,10,3,7,1,0,5,9,2,6,10,3,7,1,4,8,9,2,6,10,3,7,1,4,8,0,5,6,10,3,7,1,4,8,0,5,9,2,3,7,1,4,8,0,5,9,2,6,10);
        // 3 of s=16
        List<Integer> numList16_0 = Arrays.asList(1,3,0,2,14,9,12,8,7,5,10,6,11,4,13,15,2,0,3,1,13,5,10,7,8,9,12,11,6,15,14,4,3,1,2,0,4,7,11,5,9,8,6,10,12,14,15,13,0,2,1,3,15,8,6,9,5,7,11,12,10,13,4,14,7,9,8,5,6,2,4,3,0,1,13,15,14,11,10,12,14,4,15,13,3,6,5,12,11,10,7,9,8,0,1,2,10,11,6,12,5,4,0,14,15,13,3,2,1,9,7,8,15,13,14,4,2,11,9,10,6,12,8,5,7,1,0,3,13,15,4,14,1,12,8,6,10,11,9,7,5,2,3,0,9,7,5,8,10,0,13,1,2,3,4,14,15,12,6,11,11,10,12,6,7,13,2,15,14,4,1,0,3,8,5,9,6,12,10,11,9,15,1,13,4,14,2,3,0,5,8,7,12,6,11,10,8,14,3,4,13,15,0,1,2,7,9,5,5,8,9,7,11,3,15,2,1,0,14,4,13,6,12,10,8,5,7,9,12,1,14,0,3,2,15,13,4,10,11,6,4,14,13,15,0,10,7,11,12,6,5,8,9,3,2,1);
        List<Integer> numList16_1 = Arrays.asList(0,2,3,1,14,9,10,7,5,8,12,11,6,15,13,4,3,1,0,2,15,5,11,8,9,7,6,10,12,14,4,13,1,3,2,0,4,7,12,9,8,5,10,6,11,13,15,14,2,0,1,3,13,8,6,5,7,9,11,12,10,4,14,15,13,14,15,4,1,6,5,11,10,12,9,8,7,2,3,0,11,6,10,12,5,4,2,15,14,13,0,1,3,8,9,7,9,8,5,7,6,3,4,2,1,0,13,14,15,10,12,11,12,10,6,11,9,13,3,14,15,4,1,0,2,7,5,8,6,11,12,10,8,14,0,13,4,15,2,3,1,5,7,9,4,15,14,13,2,11,7,6,12,10,8,9,5,1,0,3,5,7,9,8,11,1,15,0,3,2,14,13,4,12,10,6,7,5,8,9,12,2,13,3,0,1,4,15,14,11,6,10,8,9,7,5,10,0,14,1,2,3,15,4,13,6,11,12,15,4,13,14,0,12,9,10,11,6,5,7,8,3,2,1,14,13,4,15,3,10,8,12,6,11,7,5,9,0,1,2,10,12,11,6,7,15,1,4,13,14,3,2,0,9,8,5);
        List<Integer> numList16_2 = Arrays.asList(1,8,7,9,4,10,13,2,11,12,0,15,14,6,3,5,4,0,5,6,8,1,10,14,13,15,11,2,12,3,9,7,15,14,3,13,2,4,8,6,0,5,7,9,1,11,10,12,11,12,10,2,13,8,0,9,7,1,5,6,4,14,15,3,10,13,4,0,1,2,3,12,6,7,15,11,8,9,5,14,13,1,8,4,0,3,2,7,10,14,9,5,11,15,12,6,8,4,2,10,3,0,1,5,14,11,6,7,15,12,13,9,2,5,12,11,14,15,6,1,9,4,3,10,7,0,8,13,6,7,14,1,9,5,15,8,12,0,4,3,13,10,11,2,7,2,11,12,15,14,9,13,5,3,10,0,6,8,4,1,12,3,9,5,6,7,11,0,15,13,2,4,10,1,14,8,14,15,6,3,11,12,5,10,8,2,13,1,9,4,7,0,3,11,13,7,10,6,14,4,1,9,12,8,0,5,2,15,5,6,1,8,7,9,4,15,3,10,14,12,2,13,0,11,0,9,15,14,12,11,7,3,4,8,1,13,5,2,6,10,9,10,0,15,5,13,12,11,2,6,8,14,3,7,1,4);
        // 3 of s=19
        List<Integer> numList19_0 = Arrays.asList(18,1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16,0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,17,0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,16,18,1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,15,17,0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,14,16,18,1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,13,15,17,0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,12,14,16,18,1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,11,13,15,17,0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,10,12,14,16,18,1,3,5,7,9,11,13,15,17,0,2,4,6,8,9,11,13,15,17,0,2,4,6,8,10,12,14,16,18,1,3,5,7,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,0,2,4,6,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16,18,1,3,5,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,0,2,4,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16,18,1,3,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,0,2,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16,18,1,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,0,1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16,18);
        List<Integer> numList19_1 = Arrays.asList(17,1,4,7,10,13,16,0,3,6,9,12,15,18,2,5,8,11,14,0,3,6,9,12,15,18,2,5,8,11,14,17,1,4,7,10,13,16,15,18,2,5,8,11,14,17,1,4,7,10,13,16,0,3,6,9,12,13,16,0,3,6,9,12,15,18,2,5,8,11,14,17,1,4,7,10,11,14,17,1,4,7,10,13,16,0,3,6,9,12,15,18,2,5,8,9,12,15,18,2,5,8,11,14,17,1,4,7,10,13,16,0,3,6,7,10,13,16,0,3,6,9,12,15,18,2,5,8,11,14,17,1,4,5,8,11,14,17,1,4,7,10,13,16,0,3,6,9,12,15,18,2,3,6,9,12,15,18,2,5,8,11,14,17,1,4,7,10,13,16,0,1,4,7,10,13,16,0,3,6,9,12,15,18,2,5,8,11,14,17,18,2,5,8,11,14,17,1,4,7,10,13,16,0,3,6,9,12,15,16,0,3,6,9,12,15,18,2,5,8,11,14,17,1,4,7,10,13,14,17,1,4,7,10,13,16,0,3,6,9,12,15,18,2,5,8,11,12,15,18,2,5,8,11,14,17,1,4,7,10,13,16,0,3,6,9,10,13,16,0,3,6,9,12,15,18,2,5,8,11,14,17,1,4,7,8,11,14,17,1,4,7,10,13,16,0,3,6,9,12,15,18,2,5,6,9,12,15,18,2,5,8,11,14,17,1,4,7,10,13,16,0,3,4,7,10,13,16,0,3,6,9,12,15,18,2,5,8,11,14,17,1,2,5,8,11,14,17,1,4,7,10,13,16,0,3,6,9,12,15,18);
        List<Integer> numList19_2 = Arrays.asList(16,1,5,9,13,17,2,6,10,14,18,3,7,11,15,0,4,8,12,0,4,8,12,16,1,5,9,13,17,2,6,10,14,18,3,7,11,15,13,17,2,6,10,14,18,3,7,11,15,0,4,8,12,16,1,5,9,10,14,18,3,7,11,15,0,4,8,12,16,1,5,9,13,17,2,6,7,11,15,0,4,8,12,16,1,5,9,13,17,2,6,10,14,18,3,4,8,12,16,1,5,9,13,17,2,6,10,14,18,3,7,11,15,0,1,5,9,13,17,2,6,10,14,18,3,7,11,15,0,4,8,12,16,17,2,6,10,14,18,3,7,11,15,0,4,8,12,16,1,5,9,13,14,18,3,7,11,15,0,4,8,12,16,1,5,9,13,17,2,6,10,11,15,0,4,8,12,16,1,5,9,13,17,2,6,10,14,18,3,7,8,12,16,1,5,9,13,17,2,6,10,14,18,3,7,11,15,0,4,5,9,13,17,2,6,10,14,18,3,7,11,15,0,4,8,12,16,1,2,6,10,14,18,3,7,11,15,0,4,8,12,16,1,5,9,13,17,18,3,7,11,15,0,4,8,12,16,1,5,9,13,17,2,6,10,14,15,0,4,8,12,16,1,5,9,13,17,2,6,10,14,18,3,7,11,12,16,1,5,9,13,17,2,6,10,14,18,3,7,11,15,0,4,8,9,13,17,2,6,10,14,18,3,7,11,15,0,4,8,12,16,1,5,6,10,14,18,3,7,11,15,0,4,8,12,16,1,5,9,13,17,2,3,7,11,15,0,4,8,12,16,1,5,9,13,17,2,6,10,14,18);
        // 3 of s=23
        List<Integer> numList23_0 = Arrays.asList(22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,5,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,4,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,3,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,2,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22,0,2,4,6,8,10,12,14,16,18,20,22,0,3,5,7,9,11,13,15,17,19,21,1,0,3,5,7,9,11,13,15,17,19,21,1,2,4,6,8,10,12,14,16,18,20,22);
        List<Integer> numList23_1 = Arrays.asList(21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,6,9,12,15,18,21,1,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,4,7,10,13,16,19,22,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,2,5,8,11,14,17,20,0,3,6,9,12,15,18,21,1,4,7,10,13,16,19,22);
        List<Integer> numList23_2 = Arrays.asList(20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,9,13,17,21,2,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,6,10,14,18,22,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,3,7,11,15,19,0,4,8,12,16,20,1,5,9,13,17,21,2,6,10,14,18,22);

        if(s <= 3) {
            s = 3;
            mols_data.insert_ols(3, numList3_0);
            mols_data.insert_ols(3, numList3_1);
        } else if(s == 4){
            mols_data.insert_ols(4, numList4_0);
            mols_data.insert_ols(4, numList4_1);
            mols_data.insert_ols(4, numList4_2);
        } else if(s == 5) {
            mols_data.insert_ols(5, numList5_0);
            mols_data.insert_ols(5, numList5_1);
            mols_data.insert_ols(5, numList5_2);
            mols_data.insert_ols(5, numList5_3);
        } else if(s <= 7){
            s = 7;
            mols_data.insert_ols(7, numList7_0);
            mols_data.insert_ols(7, numList7_1);
            mols_data.insert_ols(7, numList7_2);
            mols_data.insert_ols(7, numList7_3);
            mols_data.insert_ols(7, numList7_4);
            mols_data.insert_ols(7, numList7_5);
        } else if(s == 8){
            mols_data.insert_ols(8, numList8_0);
            mols_data.insert_ols(8, numList8_1);
            mols_data.insert_ols(8, numList8_2);
            mols_data.insert_ols(8, numList8_3);
            mols_data.insert_ols(8, numList8_4);
            mols_data.insert_ols(8, numList8_5);
            mols_data.insert_ols(8, numList8_6);
        } else if(s == 9) {
            mols_data.insert_ols(9, numList9_0);
            mols_data.insert_ols(9, numList9_1);
            mols_data.insert_ols(9, numList9_2);
            mols_data.insert_ols(9, numList9_3);
            mols_data.insert_ols(9, numList9_4);
            mols_data.insert_ols(9, numList9_5);
            mols_data.insert_ols(9, numList9_6);
            mols_data.insert_ols(9, numList9_7);
        } else if(s <= 11) {
            s = 11;
            mols_data.insert_ols(11, numList11_0);
            mols_data.insert_ols(11, numList11_1);
            mols_data.insert_ols(11, numList11_2);
        } else if(s <= 16) {
            s = 16;
            mols_data.insert_ols(16, numList16_0);
            mols_data.insert_ols(16, numList16_1);
            mols_data.insert_ols(16, numList16_2);
        } else if(s <= 19){
            s = 19;
            mols_data.insert_ols(19, numList19_0);
            mols_data.insert_ols(19, numList19_1);
            mols_data.insert_ols(19, numList19_2);
        }else if(s <= 23){
            s = 23;
            mols_data.insert_ols(23, numList23_0);
            mols_data.insert_ols(23, numList23_1);
            mols_data.insert_ols(23, numList23_2);
        }
        else {
            s = -1;
            System.out.println("We do not support this size");
        }
        return s;
    }

    @Override
    // gets vector that says which bits need to be true in the bloomFilter,
    // then changes each relevant bit to be true in bloomFilter
    public void insert(int number) {
        Vector<Integer> bit_mask = hashFunction.get(number);
        bloomFilter.addAll(bit_mask);
    }

    @Override
    // gets vector that says which bits need to be true in the bloomFilter,
    // then if all relevant bits are true in bloomFilter then number is found in bloomFilter return true
    // otherwise number is not found, return false
    public boolean search(int number) {
        Vector<Integer> bit_mask = hashFunction.get(number);
        for (int bit : bit_mask){
            if(!bloomFilter.contains(bit)){
                return false;
            }
        }
        return  true;
    }
}
